require("prelude-ls").installPrelude(global);
(function(){
  var viclib, ref$, slice$ = [].slice;
  viclib = (ref$ = function(){
    return import$(typeof global != 'undefined' && global !== null ? global : window, viclib);
  }, ref$.mixin = function(){
    var i$, fns, constructor;
    fns = 0 < (i$ = arguments.length - 1) ? slice$.call(arguments, 0, i$) : (i$ = 0, []), constructor = arguments[i$];
    return function(self, init){
      var this$ = this;
      self == null && (self = {});
      init == null && (init = {});
      each(function(it){
        return it(self);
      }, fns);
      return import$(import$(self, constructor.call(self)), init);
    };
  }, ref$.install = function(lib){
    lib == null && (lib = viclib);
    return import$(typeof global != 'undefined' && global !== null ? global : window, lib);
  }, ref$.log = function(){
    return console.log.apply(console, arguments);
  }, ref$.iter = curry$(function(list, fn){
    var key, val, results$ = [];
    for (key in list) {
      val = list[key];
      results$.push(fn(val, key));
    }
    return results$;
  }), ref$.ends_with = curry$(function(str, prefix){
    return deepEq$(str.slice(-prefix.length), prefix, '===');
  }), ref$.extend = curry$(function(super_fn, fn){
    return function(){
      return fn.call(this, super_fn, arguments);
    };
  }), ref$.after = curry$(function(super_fn, fn){
    return function(){
      super_fn.apply(this, arguments);
      return fn.apply(this, arguments);
    };
  }), ref$.before = curry$(function(super_fn, fn){
    return function(){
      fn.apply(this, arguments);
      return super_fn.apply(this, arguments);
    };
  }), ref$.defer = function(fn){
    return setTimeout(fn, 1);
  }, ref$.make_id = (function(next_id){
    return function(it){
      if (it.id == null) {
        if (Object.defineProperty != null) {
          Object.defineProperty(it, "id", {
            value: next_id++
          });
        } else {
          it.id = next_id++;
        }
      }
      return it;
    };
  }.call(this, 0)), ref$.remove = function(array, obj){
    var index;
    if ((index = array.indexOf(obj)) !== -1) {
      return array.splice(index, 1);
    }
  }, ref$);
  module.exports = viclib;
  viclib();
  /*
  
  A = mixin ->
  	x: -> log "A.x"
  	y: -> log "A.y"
  
  B = mixin ->
  	A @
  	x: extend @x, (x) ->
  		x!
  		log "B.x"
  	y: before @y, ->
  		log "B.y"
  
  b = B!
  b.x!
  b.y!
  */
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function deepEq$(x, y, type){
    var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
        has = function (obj, key) { return hasOwnProperty.call(obj, key); };
    first = true;
    return eq(x, y, []);
    function eq(a, b, stack) {
      var className, length, size, result, alength, blength, r, key, ref, sizeB;
      if (a == null || b == null) { return a === b; }
      if (a.__placeholder__ || b.__placeholder__) { return true; }
      if (a === b) { return a !== 0 || 1 / a == 1 / b; }
      className = toString.call(a);
      if (toString.call(b) != className) { return false; }
      switch (className) {
        case '[object String]': return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source &&
                 a.global == b.global &&
                 a.multiline == b.multiline &&
                 a.ignoreCase == b.ignoreCase;
      }
      if (typeof a != 'object' || typeof b != 'object') { return false; }
      length = stack.length;
      while (length--) { if (stack[length] == a) { return true; } }
      stack.push(a);
      size = 0;
      result = true;
      if (className == '[object Array]') {
        alength = a.length;
        blength = b.length;
        if (first) { 
          switch (type) {
          case '===': result = alength === blength; break;
          case '<==': result = alength <= blength; break;
          case '<<=': result = alength < blength; break;
          }
          size = alength;
          first = false;
        } else {
          result = alength === blength;
          size = alength;
        }
        if (result) {
          while (size--) {
            if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
          }
        }
      } else {
        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
          return false;
        }
        for (key in a) {
          if (has(a, key)) {
            size++;
            if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
          }
        }
        if (result) {
          sizeB = 0;
          for (key in b) {
            if (has(b, key)) { ++sizeB; }
          }
          if (first) {
            if (type === '<<=') {
              result = size < sizeB;
            } else if (type === '<==') {
              result = size <= sizeB
            } else {
              result = size === sizeB;
            }
          } else {
            first = false;
            result = size === sizeB;
          }
        }
      }
      stack.pop();
      return result;
    }
  }
}).call(this);
