require("prelude-ls").installPrelude(global);
require("viclib")();
(function(){
  var $, processingjs, REFRESH_ELEMENTS, was_removed, track, fns, slice$ = [].slice;
  $ = require('jquery-browserify');
  processingjs = require('processing');
  window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(it){
    return setTimeout(it, 1000 / 60);
  };
  REFRESH_ELEMENTS = [];
  window.body = $("body");
  window.mousex = 0;
  window.mousey = 0;
  window.scrw = window.innerWidth;
  window.scrh = window.innerHeight;
  was_removed = function(element){
    return !$.contains(document.documentElement, element[0]);
  };
  track = function(obj){
    var x$;
    if (!in$(obj, REFRESH_ELEMENTS)) {
      x$ = obj;
      x$.css({
        position: "fixed"
      });
      x$.data("box", {});
      return REFRESH_ELEMENTS.splice(0, 0, obj);
    }
  };
  $('*').css({
    margin: 0,
    padding: 0
  });
  $.refresh_boxes = function(){
    var untrack_indexes, index, ref$, obj, parent, parent_x, ref1$, parent_y, obj_box, box, key, val, results$ = [];
    untrack_indexes = [];
    for (index in ref$ = REFRESH_ELEMENTS) {
      obj = ref$[index];
      if (was_removed(obj)) {
        untrack_indexes = untrack_indexes.concat(index);
      }
      parent = obj.parent();
      parent_x = parent != null ? (ref1$ = parent.position()) != null ? ref1$.left : void 8 : void 8;
      parent_y = parent != null ? (ref1$ = parent.position()) != null ? ref1$.top : void 8 : void 8;
      obj_box = typeof obj_box === "function"
        ? obj.data("box").apply(obj)
        : obj.data("box");
      box = {};
      for (key in obj_box) {
        val = obj_box[key];
        box[key] = typeof obj_box[key] === "function"
          ? obj_box[key].apply(obj)
          : obj_box[key];
      }
      if (box.x != null) {
        obj.css({
          left: parent_x + box.x
        });
      }
      if (box.X != null) {
        obj.css({
          width: parent_x + box.X - obj.x()
        });
      }
      if (box.y != null) {
        obj.css({
          top: parent_y + box.y
        });
      }
      if (box.Y != null) {
        obj.css({
          height: parent_y + box.Y - obj.y()
        });
      }
      if (box.w != null) {
        obj.css({
          width: box.w
        });
      }
      if (box.h != null) {
        results$.push(obj.css({
          height: box.h
        }));
      }
    }
    return results$;
  };
  $(window).mousemove(function(it){
    window.mousex = it.pageX;
    return window.mousey = it.pageY;
  });
  $(window).resize(function(){
    window.SCRW = window.innerWidth;
    return window.SCRH = window.innerHeight;
  });
  setTimeout($.refresh_boxes, 10);
  setTimeout($.refresh_boxes, 200);
  $(window).resize($.refresh_boxes);
  fns = {
    x: function(it){
      return it.offset().left;
    },
    X: function(it){
      return it.offset().left + it.outerWidth();
    },
    y: function(it){
      return it.offset().top;
    },
    Y: function(it){
      return it.offset().top + it.outerHeight();
    },
    w: function(it){
      return it.outerWidth();
    },
    h: function(it){
      return it.outerHeight();
    }
  };
  iter(fns, function(fn, key){
    return $.fn[key] = function(new_val){
      track(this);
      if (new_val == null) {
        return fn(this);
      }
      this.data("box")[key] = new_val;
      return this;
    };
  });
  each(function(tag){
    return window[tag] = function(){
      var children, id, attrs, ret, key, val;
      children = slice$.call(arguments);
      id = typeof children[0] === "string" && children[0][0] === "#" ? children.shift().slice(1) : void 8;
      attrs = children[0].toString() === "[object Object]"
        ? children.shift()
        : {};
      ret = $("<" + tag + ">");
      for (key in attrs) {
        val = attrs[key];
        if (key == 'click' || key == 'keypress' || key == 'mousedown' || key == 'mouseup' || key == 'resize' || key == 'select' || key == 'submit' || key == 'val' || key == 'x' || key == 'X' || key == 'y' || key == 'Y' || key == 'w' || key == 'h' || key == 'addClass' || key == 'html' || key == 'class' || key == 'id' || key == 'href' || key == 'target') {
          ret[key](val);
        } else if (in$(key, ['class'])) {
          ret.addClass(val);
        } else if (key == 'src' || key == 'id' || key == 'href' || key == 'target') {
          ret.attr(key, val);
        } else {
          ret.css(key, val);
        }
      }
      if (id != null) {
        ret.attr("id", id);
      }
      each(bind$(ret, 'append'), children);
      return ret;
    };
  })(
  ['div', 'span', 'img', 'canvas']);
  window.processing = function(w, h, fns){
    var canvas;
    canvas = $("<canvas/>");
    fns = typeof fns === "function" ? {
      draw: fns
    } : fns;
    new Processing(canvas.get(0), function(processing){
      processing.setup = function(){
        processing.size(w, h);
        return fns.setup.call(processing);
      };
      return processing.draw = fns.draw.bind(processing);
    });
    return canvas[0];
  };
  module.exports = $;
  function in$(x, arr){
    var i = -1, l = arr.length >>> 0;
    while (++i < l) if (x === arr[i] && i in arr) return true;
    return false;
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
